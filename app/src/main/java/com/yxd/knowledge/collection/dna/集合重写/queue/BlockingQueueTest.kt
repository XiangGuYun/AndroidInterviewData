package 数据结构和算法.集合重写.queue

object BlockingQueueTest {
    @JvmStatic
    fun main(args: Array<String>) {
        when (2) {
            1 -> 理论基础()
            2 -> 锁和阻塞()
        }
    }

    private fun 锁和阻塞() {

    }

    private fun 理论基础() {
        // ======================================
        // 数组
        // 数组长度是固定的，元素的内存地址是连续的，
        // 类型是一致的，占用的内存长度也是相同的
        val arr = arrayOfNulls<Int>(5)
        // 通过下标迅速访问元素
        // 下标i元素的内存地址 = 起始元素的内存地址 + i x 每个元素占用的内存长度
        // 数组的特点是查询快，增删慢
        arr[1]

        // ======================================
        // 链表
        // 特点： 元素1 → 元素2 → 元素3，元素与元素之间环环相扣，内存地址不连续
        // 单向链表：存储自身节点的值和下个节点的指针
        // 双向链表：存储之神节点的值和上下两个节点的指针
        // 链表的特点是查询慢，增删快，不需要扩容，单个元素所占内存控件较大
    }
}
